// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//Para criarmos uma migration usamos -> yarn prisma migrate dev

model User {
  id         String    @id @default(uuid())
  name       String
  email      String    @unique
  password   String
  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())

  @@map("users") //serve para mapear essa tabela, ou seja, qual vai ser o nome dela no banco de dados
}

model Category {
  id         String    @id @default(uuid())
  name       String    @unique
  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())
  products   Product[] //Signica que uma Categoria pode ter vários Produtos relacionado a ela

  @@map("categories")
}

model Product {
  id          String    @id @default(uuid())
  name        String    @unique
  price       String
  description String
  banner      String
  created_at  DateTime? @default(now())
  updated_at  DateTime? @default(now())

  category    Category @relation(fields: [category_id], references: [id]) //Faz a relação do Produto com a Categoria, onde a coluna category_id terá o id da Categoria que esse Produto pertence
  category_id String

  order_products OrderProduct[] //Significa que um Produto pode ter várias Ordem de Produtos relacionado a ele

  @@map("products")
}

model Order {
  id         String    @id @default(uuid())
  table      Int
  status     Boolean   @default(false)
  draft      Boolean   @default(true)
  name       String? //o ? significa que é opcional
  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())

  order_products OrderProduct[] //Significa que uma Ordem de Pedido pode ter vários Pedidos de Produtos relacionado a ela

  @@map("orders")
}

model OrderProduct {
  id         String    @id @default(uuid())
  amount     Int
  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())

  order   Order   @relation(fields: [order_id], references: [id]) //Faz a relação do Pedido de Produto com a Ordem de Pedido, onde a coluna order_id terá o id da Ordem de Pedido que esse Pedido de Produto pertence
  product Product @relation(fields: [product_id], references: [id]) //Faz a relação do Pedido de Produto com o Produto, onde a coluna product_id terá o id do Produto que esse Pedido de Produto pertence

  order_id   String
  product_id String

  @@map("order_products")
}
